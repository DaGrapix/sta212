knitr::opts_chunk$set(echo = TRUE)
setwd(getwd())
getwd()
rm(list=ls())
rm(list=ls())
setwd(getwd())
data <- load(data="X_y.rda")
data <- load(file="X_y.rda")
data
X
head(X)
ggplot(data)
library(ggplot2)
data <- load(file="X_y.rda")
ggplot(data)
summary(X)
summary(y)
X$V3
X[,3]
X
load("C:/Users/pc/Desktop/sta212/X_y.rda")
View(X)
View(y)
data <- load(file="X_y.rda")
load(file="X_y.rda")
df <- as.data.frame(cbind(X, y))
names(df) <- c("V1", "V2", "V3", "y")
df
ggplot(data=df) + aes(x=V1, y=y) + geom_point()
ggplot(data=df) + aes(x=V1, y=V2, z=y) + geom_point()
ggplot(data=df) + aes(x=V1, y=V2, z=y, color=as.factor(y)) + geom_point()
length(df)
nrow(df)
c()
length(c())
length(c(1))
sample(x=seq(1, n))
sample(x=seq(1, 4))
sample(x=seq(1, 4), 1)
sample(x=seq(1, 4), 1)
sample(x=seq(1, 4), 1)
sample(x=seq(1, 4), 1)
sample(x=seq(1, 4), 1)
sample(x=seq(1, 4), 1)
df
X
X[5,]
?tapply
?apply
library(tidyverse)
?sapply
theta = 0
theta = c(0,0,0)
clear
theta
dot(theta, X[1,])
theta%*%X[1,]
theta
f <- sapply(X=X, FUN=function(k) theta%*%X[k,])
n <- nrow(X)
f <- sapply(X=seq(1, n), FUN=function(k) theta%*%X[k,])
f
theta = c(1,2,3)
n <- nrow(X)
f <- sapply(X=seq(1, n), FUN=function(k) theta%*%X[k,])
f
b <- y*f
b
indices <- which(f<0)
indices
indices <- which(b<0)
indices
b[indices]
b[-indices]
perceptron <- function(X, y){
theta <- c(0, 0, 0)
n <- nrow(X)
m <- seq(1, n)
while (length(m) != 0){
#sample a random item from m
index = sample(seq(1, length(m)), 1)
#update theta
theta <- theta + y[index]*X[index,]
#calculate the new m
f <- sapply(X=seq(1, n), FUN=function(k) theta%*%X[k,])
b <- y*f
m <- which(b<0)
}
return(theta)
}
theta.star <- perceptron(X, y)
x, y <- list(1,2)
perceptron <- function(X, y){
theta <- c(0, 0, 0)
n <- nrow(X)
m <- seq(1, n)
counter <- 0
while (length(m) != 0){
#sample a random item from m
index = sample(seq(1, length(m)), 1)
#update theta
theta <- theta + y[index]*X[index,]
#calculate the new m
f <- sapply(X=seq(1, n), FUN=function(k) theta%*%X[k,])
b <- y*f
m <- which(b<0)
counter <- counter + 1
}
return(list(theta=theta, count=counter))
}
res <- perceptron(X, y)
theta.star <- res$theta
perceptron <- function(X, y){
theta <- c(0, 0, 0)
n <- nrow(X)
m <- seq(1, n)
counter <- 0
while (length(m) != 0){
#sample a random item from m
index = sample(m, 1)
#update theta
theta <- theta + y[index]*X[index,]
#calculate the new m
f <- sapply(X=seq(1, n), FUN=function(k) theta%*%X[k,])
b <- y*f
m <- which(b<0)
counter <- counter + 1
}
return(list(theta=theta, count=counter))
}
res <- perceptron(X, y)
theta.star <- res$theta
count.star <- res$count
theta.star
ggplot(data=df) + aes(x=V1, y=V2, z=y, color=as.factor(y)) + geom_point()
load(file="X_y.rda")
df <- as.data.frame(cbind(X, y))
names(df) <- c("V1", "V2", "V3", "y")
plt1 <- ggplot(data=df) + aes(x=V1, y=V2, z=y, color=as.factor(y)) + geom_point()
plt1
plt1 + geom_abline(intercept=-theta[3]/theta[2], slope=-theta[1]/theta[2])
perceptron <- function(X, y){
theta <- c(0, 0, 0)
n <- nrow(X)
m <- seq(1, n)
counter <- 0
while (length(m) != 0){
#sample a random item from m
index = sample(m, 1)
#update theta
theta <- theta + y[index]*X[index,]
#calculate the new m
temp <- sapply(X=seq(1, n), FUN=function(k) theta%*%X[k,])
criterion <- y*temp
m <- which(criterion<0)
counter <- counter + 1
}
return(list(theta=theta, count=counter))
}
res <- perceptron(X, y)
theta.star <- res$theta
count.star <- res$count
plt1 + geom_abline(intercept=-theta[3]/theta[2], slope=-theta[1]/theta[2])
plt1 + geom_abline(intercept=-theta.star[3]/theta.star[2], slope=-theta.star[1]/theta.star[2])
perceptron <- function(X, y){
theta <- c(0, 0, 0)
n <- nrow(X)
m <- seq(1, n)
counter <- 0
while (length(m) != 0){
#sample a random item from m
index = sample(m, 1)
#update theta
theta <- theta + y[index]*X[index,]
#calculate the new m
temp <- sapply(X=seq(1, n), FUN=function(k) theta%*%X[k,])
criterion <- y*temp
m <- which(criterion<0)
counter <- counter + 1
}
return(list(theta=theta, count=counter))
}
res <- perceptron(X, y)
theta.star <- res$theta
count.star <- res$count
theta.star
count.star
rm(list=ls())
setwd(getwd())
library(ggplot2)
library(tidyverse)
set.seed(150)
perceptron <- function(X, y){
theta <- c(0, 0, 0)
n <- nrow(X)
m <- seq(1, n)
counter <- 0
while (length(m) != 0){
#sample a random item from m
index = sample(m, 1)
#update theta
theta <- theta + y[index]*X[index,]
#calculate the new m
temp <- sapply(X=seq(1, n), FUN=function(k) theta%*%X[k,])
criterion <- y*temp
m <- which(criterion<0)
counter <- counter + 1
}
return(list(theta=theta, count=counter))
}
res <- perceptron(X, y)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
setwd(getwd())
library(ggplot2)
library(tidyverse)
set.seed(150)
load(file="X_y.rda")
df <- as.data.frame(cbind(X, y))
names(df) <- c("V1", "V2", "V3", "y")
plt1 <- ggplot(data=df) + aes(x=V1, y=V2, z=y, color=as.factor(y)) + geom_point()
plt1
perceptron <- function(X, y){
theta <- c(0, 0, 0)
n <- nrow(X)
m <- seq(1, n)
counter <- 0
while (length(m) != 0){
#sample a random item from m
index = sample(m, 1)
#update theta
theta <- theta + y[index]*X[index,]
#calculate the new m
temp <- sapply(X=seq(1, n), FUN=function(k) theta%*%X[k,])
criterion <- y*temp
m <- which(criterion<0)
counter <- counter + 1
}
return(list(theta=theta, count=counter))
}
res <- perceptron(X, y)
theta.star <- res$theta
count.star <- res$count
theta.star
count.star
plt1 + geom_abline(intercept=-theta.star[3]/theta.star[2], slope=-theta.star[1]/theta.star[2])
tinytex::reinstall_tinytex(repository = "illinois")
tinytex::uninstall_tinytex()
tinytex::reinstall_tinytex(repository = "illinois")
tinytex::install_tinytex(repository = "illinois")
tinytex::tlmgr_update()
--all
tinytex::tlmgr_update() --all
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
remove.packages(rlang)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
